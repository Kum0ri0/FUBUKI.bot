import discord
from discord import app_commands
from discord.ext import commands
import asyncio
from discord.ui import Button, View
import re
import random
from datetime import datetime, timedelta



TOKEN = "MTMwOTYzODU5MDM2NzY2NjI1Nw.GLR9kO.47lTRhC1ZO2IBp6UOq0a-AMDCQVuGpp8Uu-vMY"

# Configuration du bot avec intents
intents = discord.Intents.all()
intents.members = True  # S'assurer que l'intent 'members' est activ√©
bot = commands.Bot(command_prefix="-", intents=intents)




bot.event
async def on_ready():
    print(f"Bot connect√© en tant que {bot.user}")

@bot.command()
async def salut(ctx):
    """Commande simple : r√©pond 'Bonjour!' quand l'utilisateur tape '!salut'"""
    await ctx.send("Bonjour! üëã")

@bot.command()
async def addition(ctx, a: int, b: int):
    """Commande d'addition : '!addition 5 3' => 8"""
    resultat = a + b
    await ctx.send(f"Le r√©sultat est : {resultat}")

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

  
    if bot.user.mentioned_in(message):
        await message.channel.send("Vous avez besoin d'aide? Tapez `!help` pour voir mes commandes!")
    

    await bot.process_commands(message)

# √âv√©nement : le bot est pr√™t
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"Bot connect√© en tant que {bot.user} et commandes slash synchronis√©es.")
 
# Commande slash pour mute un utilisateur avec une dur√©e
@bot.tree.command(name="mute", description="Mute un membre avec une dur√©e sp√©cifi√©e.")
@app_commands.describe(member="Le membre √† mute", duration="Dur√©e (format : 1h, 30m, etc.)", reason="La raison du mute")
async def mute(interaction: discord.Interaction, member: discord.Member, duration: str, reason: str = "Aucune raison fournie"):
    # V√©rification des permissions
    if not interaction.user.guild_permissions.moderate_members:
        await interaction.response.send_message(
            "‚ùå Vous n'avez pas la permission de mute des membres.", ephemeral=True
        )
        return

    # Calculer la dur√©e du mute
    try:
        duration_mapping = {
            "h": lambda v: timedelta(hours=v),
            "m": lambda v: timedelta(minutes=v),
            "s": lambda v: timedelta(seconds=v),
            "j": lambda v: timedelta(days=v)
        }
        time_unit = duration[-1]
        time_value = int(duration[:-1])

        if time_unit not in duration_mapping:
            await interaction.response.send_message(
                "‚ùå Format de dur√©e invalide. Utilisez par exemple : 1h, 30m, 10s, 1j.", ephemeral=True
            )
            return

        mute_time = duration_mapping[time_unit](time_value)
        until_time = discord.utils.utcnow() + mute_time
        await member.timeout(until_time, reason=reason)

        embed = discord.Embed(
            title="Utilisateur mut√©",
            description=f"{member.mention} a √©t√© mute pour {duration}.\n\n**Raison** : {reason}",
            color=discord.Color.purple()
        )
        embed.set_image(url="https://i.pinimg.com/originals/76/bb/a0/76bba03c99c07c3c7510c0b7f5d9a876.gif")  # Image par d√©faut pour le mute
        embed.set_footer(text=f"Mut√© par {interaction.user}")

        await interaction.response.send_message(embed=embed)

    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå Je n'ai pas la permission de mute cet utilisateur.", ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Une erreur est survenue : {e}", ephemeral=True
        )
   

# Commande slash pour unmute un utilisateur
@bot.tree.command(name="unmute", description="D√©-mute un membre.")
@app_commands.describe(member="Le membre √† unmute", reason="La raison du unmute")
async def unmute(interaction: discord.Interaction, member: discord.Member, reason: str = "Aucune raison fournie"):
    # V√©rification des permissions
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message(
            "‚ùå Vous n'avez pas la permission de g√©rer les messages (unmute).", ephemeral=True
        )
        return

    # V√©rification : ne pas unmute soi-m√™me ou le bot
    if member == interaction.user:
        await interaction.response.send_message(
            "‚ùå Vous ne pouvez pas vous unmute vous-m√™me.", ephemeral=True
        )
        return
    if member == bot.user:
        await interaction.response.send_message(
            "‚ùå Vous ne pouvez pas unmute le bot.", ephemeral=True
        )
        return

    # Tentative de unmute
    try:
        # Retirer le r√¥le "Muted" du membre
        muted_role = discord.utils.get(interaction.guild.roles, name="Muted")
        if not muted_role:
            await interaction.response.send_message(
                "‚ùå Le r√¥le 'Muted' n'existe pas. Veuillez cr√©er un r√¥le 'Muted' avec les bonnes permissions.", ephemeral=True
            )
            return

        await member.remove_roles(muted_role, reason=reason)
        embed = discord.Embed(
            title="Utilisateur unmute",
            description=f"{member.mention} a √©t√© unmute avec succ√®s.\n\n**Raison** : {reason}",
            color=discord.Color.purple()
        )
        embed.set_image(url="https://i.pinimg.com/originals/8b/2a/5c/8b2a5cbe7b58d2c3f577235f805b6ef2.gif")
        embed.set_footer(text=f"Unmute par {interaction.user}")

        await interaction.response.send_message(embed=embed)
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå Je n'ai pas la permission de retirer ce r√¥le.", ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Une erreur est survenue : {e}", ephemeral=True
        )


# √âv√©nement : le bot est pr√™t
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"Bot connect√© en tant que {bot.user} et commandes slash synchronis√©es.")

# Commande slash pour bannir un utilisateur
@bot.tree.command(name="ban", description="Bannir un membre du serveur.")
@app_commands.describe(member="Le membre √† bannir", reason="La raison du bannissement")
async def ban(interaction: discord.Interaction, member: discord.Member, reason: str = "Aucune raison fournie"):
    # V√©rification des permissions
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message(
            "‚ùå Vous n'avez pas la permission de bannir des membres.", ephemeral=True
        )
        return

    # V√©rification : ne pas bannir soi-m√™me ou le bot
    if member == interaction.user:
        await interaction.response.send_message(
            "‚ùå Vous ne pouvez pas vous bannir vous-m√™me.", ephemeral=True
        )
        return
    if member == bot.user:
        await interaction.response.send_message(
            "‚ùå Vous ne pouvez pas bannir le bot.", ephemeral=True
        )
        return

    # Tentative de bannissement
    try:
        await member.ban(reason=reason)
        embed = discord.Embed(
            title="Utilisateur banni",
            description=f"{member.mention} a √©t√© banni avec succ√®s.\n\n**Raison** : {reason}",
            color=discord.Color.purple()
        )
        # Image par d√©faut int√©gr√©e dans l'embed
        embed.set_image(url="https://i.pinimg.com/originals/44/ca/a3/44caa3a1f18ef057b7a3dabe994d1d56.gif")
        embed.set_footer(text=f"Banni par {interaction.user}")

        await interaction.response.send_message(embed=embed)
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå Je n'ai pas la permission de bannir cet utilisateur.", ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Une erreur est survenue : {e}", ephemeral=True)
    







# √âv√©nement : le bot est pr√™t
@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"Bot connect√© en tant que {bot.user} et commandes slash synchronis√©es.")

# Commande slash pour afficher les informations du serveur
@bot.tree.command(name="serverinfo", description="Affiche les informations du serveur.")
async def server_info(interaction: discord.Interaction):
    guild = interaction.guild  # R√©cup√©rer l'objet du serveur

    # R√©cup√©rer le propri√©taire du serveur
    owner = guild.owner
    # Nombre de membres
    member_count = guild.member_count
    # Liste des emojis
    emojis = [emoji for emoji in guild.emojis]
    emoji_count = len(emojis)
    # Nombre de boosts
    boosts = guild.premium_subscription_count
    # Nombre de salons (textuels et vocaux)
    channels_count = len(guild.text_channels) + len(guild.voice_channels)
    # Nombre de bots
    bot_count = len([member for member in guild.members if member.bot])
    # Date de cr√©ation
    created_at = guild.created_at.strftime("%d %B %Y √† %H:%M:%S")
    # Liste des r√¥les (optionnel, vous pouvez afficher certains r√¥les si n√©cessaire)
    roles = [role.name for role in guild.roles]
    roles_count = len(roles)

    # Cr√©ation de l'embed
    embed = discord.Embed(
        title=f"Informations du serveur : {guild.name}",
        color=discord.Color.purple()
    )
    embed.set_thumbnail(url=guild.icon.url if guild.icon else discord.Embed.Empty)
    embed.set_image(url="https://i.pinimg.com/originals/0f/54/ba/0f54babf7a9366335af1febf6e322c18.gif")
    
    embed.add_field(name="Propri√©taire", value=f"{owner} (ID: {owner.id})", inline=False)
    embed.add_field(name="Date de cr√©ation", value=created_at, inline=False)
    embed.add_field(name="Nombre de membres", value=member_count, inline=True)
    embed.add_field(name="Nombre d'emojis", value=emoji_count, inline=True)
    embed.add_field(name="Nombre de r√¥les", value=roles_count, inline=True)
    embed.add_field(name="Nombre de boosts", value=boosts, inline=True)
    embed.add_field(name="Nombre de salons", value=channels_count, inline=True)
    embed.add_field(name="Nombre de bots", value=bot_count, inline=True)
    
    if emoji_count > 0:
        embed.add_field(name="Liste des emojis", value=", ".join([str(emoji) for emoji in emojis[:5]]) + ("..." if emoji_count > 5 else ""), inline=False)
    
    embed.set_footer(text=f"Commande ex√©cut√©e par {interaction.user}")

    # Envoi de l'embed
    await interaction.response.send_message(embed=embed)







# Commande slash pour supprimer un nombre sp√©cifique de messages
@bot.tree.command(name="clearchat", description="Supprimer un certain nombre de messages.")
@app_commands.describe(amount="Le nombre de messages √† supprimer")
async def clearchat(interaction: discord.Interaction, amount: int):
    # V√©rification des permissions
    if not interaction.user.guild_permissions.manage_messages:
        await interaction.response.send_message(
            "‚ùå Vous n'avez pas la permission de g√©rer les messages.", ephemeral=True
        )
        return

    # V√©rification si le nombre de messages est raisonnable
    if amount < 1 or amount > 100:
        await interaction.response.send_message(
            "‚ùå Vous devez sp√©cifier un nombre de messages entre 1 et 100.", ephemeral=True
        )
        return

    # Tentative de suppression des messages
    try:
        deleted = await interaction.channel.purge(limit=amount)
        await interaction.response.send_message(
            f"‚úÖ {len(deleted)} messages ont √©t√© supprim√©s.", ephemeral=True
        )
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå Je n'ai pas la permission de supprimer des messages dans ce canal.", ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Une erreur est survenue : {e}", ephemeral=True
        )



# Commande slash pour cr√©er un ticket
@bot.tree.command(name="ticket", description="Cr√©er un ticket pour obtenir de l'aide.")
async def ticket(interaction: discord.Interaction):
    # Cr√©er un canal priv√© pour le ticket
    guild = interaction.guild
    category = discord.utils.get(guild.categories, name="Tickets")

    if not category:
        category = await guild.create_category(name="Tickets")
    
    # Cr√©er le canal du ticket
    ticket_channel = await guild.create_text_channel(
        name=f"ticket-{interaction.user.name}",
        category=category,
        overwrites={
            guild.default_role: discord.PermissionOverwrite(read_messages=False),
            interaction.user: discord.PermissionOverwrite(read_messages=True)
        }
    )

    # Cr√©er un bouton pour fermer le ticket
    close_button = Button(label="Fermer le ticket", style=discord.ButtonStyle.danger)

    # Vue pour le bouton
    async def close_ticket(interaction: discord.Interaction):
        # V√©rifier que seul l'utilisateur ayant cr√©√© le ticket ou un administrateur peut fermer
        if interaction.user != ticket_channel.guild.owner and interaction.user != interaction.user:
            await interaction.response.send_message("‚ùå Vous n'avez pas la permission de fermer ce ticket.", ephemeral=True)
            return
        await ticket_channel.delete()
        await interaction.response.send_message("‚úÖ Le ticket a √©t√© ferm√©.", ephemeral=True)

    close_button.callback = close_ticket
    view = View(timeout=None)
    view.add_item(close_button)

    # Cr√©er un embed pour le ticket
    embed = discord.Embed(
        title="Ticket cr√©√©",
        description=f"Un ticket a √©t√© cr√©√© pour {interaction.user.mention}.",
        color=discord.Color.blue()
    )
    embed.set_image(url="https://i.pinimg.com/originals/1e/0c/a8/1e0ca8992fd175911ef40ccc66212c39.gif")
    embed.set_footer(text=f"Ticket cr√©√© par {interaction.user}")

    # Envoyer l'embed dans le canal du ticket
    await ticket_channel.send(embed=embed, view=view)

    # Confirmer √† l'utilisateur que le ticket a √©t√© cr√©√©
    await interaction.response.send_message(f"‚úÖ Votre ticket a √©t√© cr√©√© dans {ticket_channel.mention}.")

@bot.tree.command(name="regles", description="Affiche les r√®gles du serveur avec une image.")
async def regles(interaction: discord.Interaction):
    # D√©finir le texte des r√®gles
    regles_message = (
        "**R√®gles du serveur :**\n\n"
        "1. Soyez respectueux envers les autres membres.\n"
        "2. Pas de spam ou de contenu inappropri√©.\n"
        "3. Suivez les consignes des mod√©rateurs.\n"
        "4. Utilisez les salons selon leur objectif.\n"
        "5. Toute violation des r√®gles peut entra√Æner des sanctions.\n\n"
        "6. Les r√¥les sont obligatoires.\n"
        "Merci de respecter ces r√®gles pour maintenir une communaut√© saine !"
    )

    # D√©finir l'URL ou le fichier local de l'image des r√®gles
    image_url = "https://i.pinimg.com/736x/9c/52/eb/9c52eb5ad87053b29cb121a89565a586.jpg"

    # Cr√©er un embed pour afficher les r√®gles et l'image
    embed = discord.Embed(
        title="Bienvenue sur Fubuki !",
        description=regles_message,
        color=discord.Color.purple()
    )
    embed.set_image(url=image_url)
    embed.set_footer(text=f"Command√© par {interaction.user}")

    # Envoyer l'embed dans le salon
    await interaction.response.send_message(embed=embed)


@bot.command(name="avatar", help="Afficher la photo de profil d'un membre.")
async def avatar(ctx, member: discord.Member = None):
    # Si aucun membre n'est mentionn√©, utiliser l'auteur de la commande
    if member is None:
        member = ctx.author

    # Cr√©er un embed avec la photo de profil du membre
    embed = discord.Embed(
        title=f"Photo de profil de {member.display_name}",
        color=discord.Color.purple()
    )
    embed.set_image(url=member.avatar.url)  # Ajouter l'image de profil √† l'embed

    # Envoyer l'embed dans le canal
    await ctx.send(embed=embed)


#Liste pour enregistrer les messages supprim√©s
deleted_messages = []

# √âv√©nement : lorsque un message est supprim√©
@bot.event
async def on_message_delete(message: discord.Message):
    # Nous n'enregistrons pas les messages du bot ou les messages syst√®me
    if message.author.bot:
        return

    # Enregistrer le message supprim√© dans la liste
    deleted_messages.append({
        'author': message.author.name,
        'content': message.content,
        'channel': message.channel.name,
        'timestamp': message.created_at.strftime('%Y-%m-%d %H:%M:%S')
    })

# Commande !logs pour voir les messages supprim√©s
@bot.command(name="snipe", help="Afficher les derniers messages supprim√©s.")
async def view_deleted_messages(ctx):
    # V√©rifier si l'utilisateur a la permission d'acc√©der aux logs
    if not ctx.author.guild_permissions.administrator:
        await ctx.send("‚ùå Vous n'avez pas la permission de voir les logs.")
        return

    # V√©rifier s'il y a des messages supprim√©s
    if not deleted_messages:
        await ctx.send("‚ùå Aucun message supprim√© √† afficher.")
        return

    # Cr√©er un message pour afficher les logs
    logs = ""
    for log in deleted_messages[-5:]:  # Afficher les 5 derniers messages supprim√©s
        logs += f"**{log['author']}** a √©crit dans {log['channel']} :\n{log['content']}\n[Supprim√© √† {log['timestamp']}]\n\n"

    await ctx.send(f"**Derniers messages supprim√©s** :\n{logs}")

@bot.tree.command(name="unban", description="D√©bannir un utilisateur du serveur.")
@app_commands.describe(user="L'utilisateur √† d√©bannir (format : NomUtilisateur#Discriminateur)")
async def unban(interaction: discord.Interaction, user: str):
    # V√©rification des permissions
    if not interaction.user.guild_permissions.ban_members:
        await interaction.response.send_message(
            "‚ùå Vous n'avez pas la permission de d√©bannir des membres.", ephemeral=True
        )
        return

    # Recherche de l'utilisateur banni
    banned_users = await interaction.guild.bans()
    user_to_unban = None
    for ban_entry in banned_users:
        if str(ban_entry.user) == user:
            user_to_unban = ban_entry.user
            break

    if user_to_unban is None:
        await interaction.response.send_message(
            f"‚ùå Aucun utilisateur banni correspondant √† {user}.", ephemeral=True
        )
        return

    # Tentative de d√©bannissement
    try:
        await interaction.guild.unban(user_to_unban)
        embed = discord.Embed(
            title="Utilisateur d√©banni",
            description=f"{user_to_unban} a √©t√© d√©banni avec succ√®s.",
            color=discord.Color.green()
        )
        embed.set_footer(text=f"D√©banni par {interaction.user}")

        await interaction.response.send_message(embed=embed)
    except discord.Forbidden:
        await interaction.response.send_message(
            "‚ùå Je n'ai pas la permission de d√©bannir cet utilisateur.", ephemeral=True
        )
    except Exception as e:
        await interaction.response.send_message(
            f"‚ùå Une erreur est survenue : {e}", ephemeral=True
        )

    # Commande slash pour calculer l'amour entre deux membres
@bot.tree.command(name="love", description="Calculer l'amour entre deux membres.")
@app_commands.describe(member1="Le premier membre", member2="Le deuxi√®me membre")
async def love(interaction: discord.Interaction, member1: discord.Member, member2: discord.Member):
    # Calcul al√©atoire du score d'amour (entre 0 et 100)
    love_score = random.randint(0, 100)

    # Cr√©er un embed avec les photos de profil des deux membres et le score d'amour
    embed = discord.Embed(
        title="Calcul de l'amour üíñ",
        description=f"Voici le score d'amour entre **{member1.display_name}** et **{member2.display_name}** :",
        color=discord.Color.purple()
    )
    
    # Ajouter les photos de profil des deux membres
    embed.set_thumbnail(url=member1.avatar.url)  # Photo de profil du premier membre
    embed.add_field(name=f"{member1.display_name} ‚ù§Ô∏è {member2.display_name}", value=f"Score d'amour : **{love_score}%**", inline=False)
    embed.set_image(url=member2.avatar.url)  # Photo de profil du deuxi√®me membre

    # Ajouter un footer avec un message amusant
    embed.set_footer(text="L'amour est dans l'air ‚ú®")

    # Envoyer l'embed
    await interaction.response.send_message(embed=embed)




@bot.tree.command(name="sondage", description="Cr√©er un sondage avec choix multiples.")
@app_commands.describe(question="La question du sondage", options="Les options du sondage s√©par√©es par des virgules", mention="Les utilisateurs √† mentionner (optionnel)")
async def sondage(interaction: discord.Interaction, question: str, options: str, mention: str = None):
    # D√©couper les options et v√©rifier s'il y en a au moins deux
    options_list = [option.strip() for option in options.split(",")]
    if len(options_list) < 2:
        await interaction.response.send_message("‚ùå Le sondage doit avoir au moins deux options.", ephemeral=True)
        return

    # Cr√©er un message avec la question et les options
    poll_message = f"**{question}**\n\n"
    for index, option in enumerate(options_list, start=1):
        poll_message += f"{index}. {option}\n"

    # Si une mention est fournie, l'ajouter au message
    if mention:
        poll_message = f"{mention} {poll_message}"

    # Envoyer le message du sondage
    poll_message_obj = await interaction.response.send_message(poll_message)

    # Ajouter des r√©actions correspondant aux options
    emojis = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
    for i in range(len(options_list)):
        await poll_message_obj.add_reaction(emojis[i])


# Commande !anime pour g√©n√©rer un personnage d'anime
@bot.command(name="anime")
async def anime(ctx):
    # Utilisation de l'API Multiavatar pour g√©n√©rer un personnage d'anime al√©atoire
    # Vous pouvez changer l'URL pour toute autre source API d'avatar d'anime
    url = "https://api.multiavatar.com/your_unique_id.svg"  # Remplacez "your_unique_id" par un identifiant unique pour chaque requ√™te

    # Envoyer l'image g√©n√©r√©e dans le channel
    embed = discord.Embed(title="Personnage d'Anime Al√©atoire")
    embed.set_image(url=url)
    await ctx.send(embed=embed)


# Commande !activity pour changer l'activit√© du bot
@bot.command(name="activity")
async def activity(ctx, *, activity: str):
    # Modifier l'activit√© du bot
    await bot.change_presence(activity=discord.Game(name=activity))  # Peut √™tre 'discord.Game', 'discord.Streaming', etc.
    
    # R√©pondre dans le chat pour confirmer le changement d'activit√©
    await ctx.send(f"Le statut du bot a √©t√© mis √† jour : {activity}")


# √âv√©nement : quand un membre rejoint le serveur
@bot.event
async def on_member_join(member: discord.Member):
    # Envoie un message en pingant le membre qui vient de rejoindre
    channel = discord.utils.get(member.guild.text_channels, name="‚õ©„Éªchat„ÉªË©±„Åô")  # Assurez-vous que le salon "general" existe
    if channel:
        await channel.send(f"Bienvenue {member.mention}!comment vas-tu ?! J'esp√®re que le serveur de plaira tu pourras faires tes r√¥les dans <#1285701721049403403> et accepter les <#1285712154053578904> . Merci d'avance et amuse toi bien ici !")


# Liste des utilisateurs et r√¥les autoris√©s
allowed_users = set()
allowed_roles = set()

# V√©rification des permissions
async def check_permissions(ctx):
    if ctx.author.id in allowed_users:
        return True

    user_roles = {role.id for role in ctx.author.roles}
    if user_roles.intersection(allowed_roles):
        return True

    await ctx.send("‚ùå Vous n'√™tes pas autoris√© √† utiliser ce bot.")
    return False

# Commande pour ajouter un utilisateur autoris√©
@bot.command(name="adduser")
@commands.has_permissions(administrator=True)
async def add_user(ctx, user: discord.User):
    allowed_users.add(user.id)
    await ctx.send(f"‚úÖ {user.mention} a √©t√© ajout√© √† la liste des utilisateurs autoris√©s.")

# Commande pour ajouter un r√¥le autoris√©
@bot.command(name="addrole")
@commands.has_permissions(administrator=True)
async def add_role(ctx, role: discord.Role):
    allowed_roles.add(role.id)
    await ctx.send(f"‚úÖ Le r√¥le `{role.name}` a √©t√© ajout√© √† la liste des r√¥les autoris√©s.")

# Commande pour retirer un utilisateur autoris√©
@bot.command(name="removeuser")
@commands.has_permissions(administrator=True)
async def remove_user(ctx, user: discord.User):
    allowed_users.discard(user.id)
    await ctx.send(f"‚úÖ {user.mention} a √©t√© retir√© de la liste des utilisateurs autoris√©s.")

# Commande pour retirer un r√¥le autoris√©
@bot.command(name="removerole")
@commands.has_permissions(administrator=True)
async def remove_role(ctx, role: discord.Role):
    allowed_roles.discard(role.id)
    await ctx.send(f"‚úÖ Le r√¥le `{role.name}` a √©t√© retir√© de la liste des r√¥les autoris√©s.")

# Exemple de commande prot√©g√©e
@bot.command(name="secret")
async def secret_command(ctx):
    if not await check_permissions(ctx):
        return
    await ctx.send("‚ú® Voici un secret r√©serv√© aux utilisateurs autoris√©s !")

# Gestionnaire d'erreurs pour les commandes
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("‚ùå Vous n'avez pas les permissions n√©cessaires pour ex√©cuter cette commande.")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("‚ùå Il manque un argument obligatoire pour cette commande.")
    elif isinstance(error, commands.UserInputError):
        await ctx.send("‚ùå Entr√©e invalide. V√©rifiez les arguments fournis.")
    else:
        await ctx.send("‚ùå Une erreur inattendue s'est produite.")



bot.run(TOKEN)
